group = 'co.akwad.websphere'
version = '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: JavaPlugin
apply plugin: 'arquillian'


buildscript {
    repositories {
        jcenter()
        //mavenCentral()
        maven {
        url 'http://repository.jboss.org/nexus/content/groups/public'
       // url "http://maven.restlet.org"
    	}
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.2'
        classpath 'org.jboss.arquillian.gradle:arquillian-gradle-plugin:0.1'
    }
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	//these settings are for arquillian test
    compileOnly
    
    //this config for docker 
    dockerJava {
        resolutionStrategy {
            force 'de.gesellix:unix-socket-factory:2016-04-06T22-21-19'
        }
    }

}

sourceSets {
    main {
        compileClasspath = configurations.compile + configurations.compileOnly
    }
    test {
        compileClasspath = compileClasspath + configurations.compileOnly
    }
}

docker {

    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }

}





dependencies {
    providedCompile group: 'javax', name: 'javaee-api', version:'7.0'


    compile group: 'org.jboss.arquillian', name: 'arquillian-bom', version: '1.2.1.Final', ext: 'pom'
    compile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-core', version: '1.2.1.Final'
    compile group: 'org.jboss.arquillian.protocol', name: 'arquillian-protocol-servlet', version: '1.2.0.Final'
    compile group: 'org.jboss.arquillian.container', name: 'arquillian-wlp-managed-8.5', version: '1.0.0.Beta2'
    
    compile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-gradle-depchain', version: '3.1.2', ext: 'pom'
    compile group: 'org.arquillian.cube', name: 'arquillian-cube-spi', version: '1.13.0'
    

    testCompile "junit:junit:4.12"
    testCompile group: 'org.jboss.arquillian', name: 'arquillian-junit', version: '1.0.0.Alpha4'
    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container', version: '1.2.1.Final'
    testCompile group: 'org.arquillian.cube', name: 'arquillian-cube-docker', version: '1.13.0'
    testCompile group: 'org.jboss.arquillian.extension', name: 'arquillian-rest-client-api', version: '1.0.0.Alpha4'
    testCompile group: 'org.wildfly', name:'wildfly-arquillian-container-remote', version:'8.2.0.Final'

   
}


task copyDockerArtifacts(type: Copy) {
    dependsOn build
    from('build/libs') {
        include "javaee-docker-gradle-${project.version}.war"
    }
    from('src/main/docker') {
        include 'Dockerfile'
    }
    from('src/main/docker') {
    	include 'docker-compose.yml'
    }
    into 'build/docker'

    rename "javaee-docker-gradle-${project.version}.war", 'javaee-docker-gradle.war'
}

task copyAppServerXML(type : Copy) {
    dependsOn copyDockerArtifacts

    from('src/main/resources') {
        include 'server.xml'
    }
    into 'build/docker/app'

}

task copyAdminServerXML(type : Copy) {
    dependsOn copyAppServerXML

    from('src/main/resources') {
        include 'admin-server.xml'
    }
    into 'build/docker/admin-app'

    rename 'admin-server.xml' , 'server.xml'

}

task buildImage(type: DockerBuildImage) {
    dependsOn copyAdminServerXML
    inputDir = project.file('build/docker')
    tag = 'javaee-docker-gradle'
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    containerName "websphere"
    portBindings = ['8080:9080','443:9443']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}
